// app.js
const express = require("express");
const app = express();
const PORT = 3000;

// Middleware to parse JSON request bodies
app.use(express.json());

// In-memory array to store cards
let cards = [
  { id: 1, suit: "Hearts", value: "Ace" },
  { id: 2, suit: "Spades", value: "King" },
  { id: 3, suit: "Diamonds", value: "Queen" },
];

// Root route - API welcome message
app.get("/", (req, res) => {
  res.send(`
    <h1>ðŸŽ´ Playing Card API</h1>
    <p>Available endpoints:</p>
    <ul>
      <li>GET /cards â†’ List all cards</li>
      <li>GET /cards/:id â†’ Get card by ID</li>
      <li>POST /cards â†’ Add a new card</li>
      <li>DELETE /cards/:id â†’ Delete a card by ID</li>
    </ul>
  `);
});

// GET: Retrieve all cards
app.get("/cards", (req, res) => {
  res.status(200).json(cards);
});

// GET: Retrieve a single card by ID
app.get("/cards/:id", (req, res) => {
  const cardId = parseInt(req.params.id);
  const card = cards.find((c) => c.id === cardId);

  if (!card) {
    return res.status(404).json({ message: "Card not found" });
  }
  res.status(200).json(card);
});

// POST: Add a new card
app.post("/cards", (req, res) => {
  const { suit, value } = req.body;

  if (!suit || !value) {
    return res.status(400).json({ message: "Suit and value are required" });
  }

  const newCard = {
    id: cards.length + 1,
    suit,
    value,
  };

  cards.push(newCard);
  res.status(201).json(newCard);
});

// DELETE: Remove a card by ID
app.delete("/cards/:id", (req, res) => {
  const cardId = parseInt(req.params.id);
  const cardIndex = cards.findIndex((c) => c.id === cardId);

  if (cardIndex === -1) {
    return res.status(404).json({ message: "Card not found" });
  }

  const deletedCard = cards.splice(cardIndex, 1);
  res.status(200).json({ message: "Card deleted", card: deletedCard });
});

// Start the server
app.listen(PORT, () => {
  console.log(`âœ… Server running at http://localhost:${PORT}`);
});
